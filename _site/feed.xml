<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OnyxRaven Blog</title>
    <description>Thoughts, tips and code from a ruby developer
</description>
    <link>http://onyxraven.com/</link>
    <atom:link href="http://onyxraven.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 17 Sep 2014 11:16:45 -0600</pubDate>
    <lastBuildDate>Wed, 17 Sep 2014 11:16:45 -0600</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Rails REST API versioning</title>
        <description>&lt;p&gt;There have been a few other articles regarding versioning REST APIs in Rails.  Many reference &lt;a href=&quot;http://railscasts.com/episodes/350-rest-api-versioning&quot;&gt;this RailsCasts (#350)&lt;/a&gt; to set up header based versioning, and there have been a few setting up path based versioning using the ‘namespace’ feature in Rails 3 routing.&lt;/p&gt;

&lt;p&gt;Our API was set up with path based using routing namespaces, and we moved ahead happily with v1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;namespace :v1 do
  resource :ping
end

class Api::V1::PingController ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;GET http://example.org/v1/ping
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recently we started working on v2 features, and started in a new namespace, looking just like v1.  To make it easy on our apps, we wanted to make all the API calls against the v2 api, even on controllers that didn’t get an ‘upgrade’ into the v2 namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://example.org/v1/ping
http://example.org/v2/ping #fallback to the v1
http://example.org/v2/pong #use v2 namespace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a non-obvious operation.  In most REST cases, redirects like explained in &lt;a href=&quot;http://stackoverflow.com/questions/9627546/api-versioning-for-rails-routes/9627796#9627796&quot;&gt;this StackOverflow post&lt;/a&gt; are not possible because you shouldn’t redirect POSTs (technically an HTTP 301 response should work, but there are few HTTP clients that respect that strict mode.  If you don’t believe a 301 response to a POST should result in a new POST, read &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;the spec&lt;/a&gt; carefully).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joshsymonds.com/&quot;&gt;Josh Symonds&lt;/a&gt; talks about how &lt;a href=&quot;http://joshsymonds.com/blog/2013/02/22/existing-rails-api-solutions-suck/&quot;&gt;existing API solutions are terrible&lt;/a&gt;, and really only one of the gems Symonds talks about in his post handles ‘fallback’ apis: &lt;a href=&quot;https://github.com/filtersquad/rocket_pants&quot;&gt;rocket_pants&lt;/a&gt;.  I wasn’t keen on using the whole kit of rocket_pants features, so I looked into &lt;a href=&quot;https://github.com/filtersquad/rocket_pants/blob/master/lib/rocket_pants/routing.rb&quot;&gt;how the ‘api’ method works&lt;/a&gt;.  Its just a fancy wrapper around a ‘scope’ line.&lt;/p&gt;

&lt;p&gt;Taking a cue from that, I came up with the replacement for the ‘namespace’ lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;scope :module =&amp;gt; &#39;v2&#39;, :path =&amp;gt; &#39;:api_version&#39;, :constraints =&amp;gt; { :api_version =&amp;gt; /v2/ } do
   resource :pong
end

scope :module =&amp;gt; &#39;v1&#39;, :path =&amp;gt; &#39;:api_version&#39;, :constraints =&amp;gt; { :api_version =&amp;gt; /v[12]/ } do
  resource :ping
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes about the scope line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;specs/tests that test ‘route_to’ assertions will need to respect the fact that :api_version will be included in the list of route parameters&lt;/li&gt;
  &lt;li&gt;regex against paths cannot be anchored.  It throws an exception at app startup time (which Passenger may hide), because those regexes are already anchored, and really you’re only working on one piece of the path at a time.&lt;/li&gt;
  &lt;li&gt;Order matters in routing - it is evaluated top-down so pay attention to the fallbacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, in the v2 scope, we can also override a given resource with a controller from the new namespace, since it will match first.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Sep 2013 09:39:00 -0600</pubDate>
        <link>http://onyxraven.com/ruby/rails/routing/2013/09/18/rails-rest-api-versioning.html</link>
        <guid isPermaLink="true">http://onyxraven.com/ruby/rails/routing/2013/09/18/rails-rest-api-versioning.html</guid>
        
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>routing</category>
        
      </item>
    
      <item>
        <title>MP4Box can fix your online-hosted MP4s</title>
        <description>&lt;p&gt;I just discovered MP4Box (available in osx homebrew as well as other places).  It has tools for rearranging your MP4 videos to optimize them for streaming.  We just did this on all our videos, and not only do they start up faster on every device, it fixed some devices that refused to play our videos!&lt;/p&gt;

&lt;p&gt;Our magic incantation was simple: &lt;code&gt;MP4Box -hint $file&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jan 2013 07:56:00 -0700</pubDate>
        <link>http://onyxraven.com/mp4/2013/01/09/mp4box-fix-online-mp4s.html</link>
        <guid isPermaLink="true">http://onyxraven.com/mp4/2013/01/09/mp4box-fix-online-mp4s.html</guid>
        
        
        <category>mp4</category>
        
      </item>
    
      <item>
        <title>Toggle Rails Caching in RSpec Suites</title>
        <description>&lt;p&gt;Useful snippet for enabling/disabling the cache during rspec&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Jan 2013 01:20:00 -0700</pubDate>
        <link>http://onyxraven.com/rspec/caching/2013/01/07/rspec-cache-toggle.html</link>
        <guid isPermaLink="true">http://onyxraven.com/rspec/caching/2013/01/07/rspec-cache-toggle.html</guid>
        
        
        <category>rspec</category>
        
        <category>caching</category>
        
      </item>
    
      <item>
        <title>Log example names/descriptions from rspec</title>
        <description>&lt;p&gt;This can help dig into the logs for a spec file.  You can do one of these two things (both is overkill)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4339818.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Wed, 19 Dec 2012 05:42:52 -0700</pubDate>
        <link>http://onyxraven.com/rspec/gist/2012/12/19/log-example-names-rspec.html</link>
        <guid isPermaLink="true">http://onyxraven.com/rspec/gist/2012/12/19/log-example-names-rspec.html</guid>
        
        
        <category>rspec</category>
        
        <category>gist</category>
        
      </item>
    
      <item>
        <title>Local/Server synchronization with Ruby and FSEvent</title>
        <description>&lt;p&gt;A lot of the work I do is PHP/html type coding. I try to keep a local setup that is able to run all of my code without too much trouble, but eventually all that code has to be tested on something resembling the production environment, or there are certain functions that can only be performed there (say, handling NFS mounts, or attaching to databases otherwise firewalled on my local machine). In those situations, I need to be able to quickly copy my code from my local machine to the development server. I used to do this manually, but the cycle of edit-save-copy-test was really annoying. Aptana and Eclipse have some tools that help, but I don’t use those tools anymore day-to-day, and they seemed to always get messed up.&lt;/p&gt;

&lt;p&gt;I took while to find a suitable setup for keeping files in sync like this. Somehow I came across doubledown, a ruby script using the OSX FSEvent framework. For whatever reason, I couldn’t quite make it work on my machine (YMMV), so I took the idea and searched for other uses of FSEvent out there. I came across a few rubygems wrapping FSEvent nicely, and wrote a script around that. First, you’ll probably want to set up ssh keys. This will let you rsync over ssh without having to log in every time (kind of important on this one). I don’t like the idea of having keys that don’t have a password, so I use keychain to manage my keys. In my ~/.zshrc I have the following snippet:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4366205.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The random delay lets me launch more than one shell at a time (my default windowgroup in Terminal.app is has two) without conflict.&lt;/p&gt;

&lt;p&gt;Second, you’ll want to have a way to fully-sync your directories. The following script does this with a single command, and with some options provided by gnu getopt. The biggest features are a preset source/destination (which can be appended), and skipping .svn/.hg directories. In a rush, skipping those makes a HUGE speed difference (especially when skipping svn).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4366220.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now for the actual ruby script using FSEvent. It also includes using growl to notify on synchronization events. While not required, it is nice to know when things are synched (and it lets me know the script is still running), but it can get a bit spammy (especially running svn up on a directory).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4366239.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;These scripts aren’t perfect, and are meant to be modified to your own needs and preferences. Its so nice not to have to worry about manually syncing the directories anymore though!&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Oct 2011 03:12:00 -0600</pubDate>
        <link>http://onyxraven.com/ruby/osx/rsync/2011/10/02/sync-ruby-fsevent.html</link>
        <guid isPermaLink="true">http://onyxraven.com/ruby/osx/rsync/2011/10/02/sync-ruby-fsevent.html</guid>
        
        
        <category>ruby</category>
        
        <category>osx</category>
        
        <category>rsync</category>
        
      </item>
    
  </channel>
</rss>
