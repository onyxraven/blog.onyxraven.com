<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: routing | OnyxRaven]]></title>
  <link href="http://onyxraven.github.io/blog/categories/routing/atom.xml" rel="self"/>
  <link href="http://onyxraven.github.io/"/>
  <updated>2014-01-13T19:35:13-07:00</updated>
  <id>http://onyxraven.github.io/</id>
  <author>
    <name><![CDATA[Justin Hart]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails REST API versioning]]></title>
    <link href="http://onyxraven.github.io/blog/2013/09/18/rails-rest-api-versioning/"/>
    <updated>2013-09-18T09:39:00-06:00</updated>
    <id>http://onyxraven.github.io/blog/2013/09/18/rails-rest-api-versioning</id>
    <content type="html"><![CDATA[<p>There have been a few other articles regarding versioning REST APIs in Rails.  Many reference <a href="http://railscasts.com/episodes/350-rest-api-versioning">this RailsCasts (#350)</a> to set up header based versioning, and there have been a few setting up path based versioning using the &lsquo;namespace&rsquo; feature in Rails 3 routing.</p>

<p>Our API was set up with path based using routing namespaces, and we moved ahead happily with v1.</p>

<p>```ruby
namespace :v1 do
  resource :ping
end</p>

<p>class Api::V1::PingController &hellip;
end
<code>
</code>
GET <a href="http://example.org/v1/ping">http://example.org/v1/ping</a>
```</p>

<p>Recently we started working on v2 features, and started in a new namespace, looking just like v1.  To make it easy on our apps, we wanted to make all the API calls against the v2 api, even on controllers that didn&rsquo;t get an &lsquo;upgrade&rsquo; into the v2 namespace.</p>

<p><code>
http://example.org/v1/ping
http://example.org/v2/ping #fallback to the v1
http://example.org/v2/pong #use v2 namespace
</code></p>

<p>This is a non-obvious operation.  In most REST cases, redirects like explained in <a href="http://stackoverflow.com/questions/9627546/api-versioning-for-rails-routes/9627796#9627796">this StackOverflow post</a> are not possible because you shouldn&rsquo;t redirect POSTs (technically an HTTP 301 response should work, but there are few HTTP clients that respect that strict mode.  If you don&rsquo;t believe a 301 response to a POST should result in a new POST, read <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">the spec</a> carefully).</p>

<p><a href="http://joshsymonds.com/">Josh Symonds</a> talks about how <a href="http://joshsymonds.com/blog/2013/02/22/existing-rails-api-solutions-suck/">existing API solutions are terrible</a>, and really only one of the gems Symonds talks about in his post handles &lsquo;fallback&rsquo; apis: <a href="https://github.com/filtersquad/rocket_pants">rocket_pants</a>.  I wasn&rsquo;t keen on using the whole kit of rocket_pants features, so I looked into <a href="https://github.com/filtersquad/rocket_pants/blob/master/lib/rocket_pants/routing.rb">how the &lsquo;api&rsquo; method works</a>.  Its just a fancy wrapper around a &lsquo;scope&rsquo; line.</p>

<p>Taking a cue from that, I came up with the replacement for the &lsquo;namespace&rsquo; lines:</p>

<p>```ruby
scope :module => &lsquo;v2&rsquo;, :path => &lsquo;:api_version&rsquo;, :constraints => { :api_version => /v2/ } do
   resource :pong
end</p>

<p>scope :module => &lsquo;v1&rsquo;, :path => &lsquo;:api_version&rsquo;, :constraints => { :api_version => /v[12]/ } do
  resource :ping
end
```</p>

<p>A few notes about the scope line:</p>

<ul>
<li>specs/tests that test &lsquo;route_to&rsquo; assertions will need to respect the fact that :api_version will be included in the list of route parameters</li>
<li>regex against paths cannot be anchored.  It throws an exception at app startup time (which Passenger may hide), because those regexes are already anchored, and really you&rsquo;re only working on one piece of the path at a time.</li>
<li>Order matters in routing &ndash; it is evaluated top-down so pay attention to the fallbacks.</li>
</ul>


<p>Now, in the v2 scope, we can also override a given resource with a controller from the new namespace, since it will match first.</p>
]]></content>
  </entry>
  
</feed>
